merle : An erlang based memcached client.

Version : pre 0.1
Author : Joe Williams
Info : http://github.com/joewilliams/merle/

This code is available as Open Source Software under the MIT license.

Caveat : At the moment getting objects from memcached that are larger
than about 1433 bytes will cause merle to fail. I am working on a better
loop to get all the data and should have something soon.

Usage:

*Starting things up:*

1> merle:start_link("localhost", 11211).
{ok,<0.33.0>}

*Storing and retreiving terms:*

2> SomeTerm = something. 
something
3> merle:set("a", "1", "0", SomeTerm).  
["STORED"]
4> merle:get("a").                      
something

5> SomeTerm1 = "howaboutthis".        
"howaboutthis"
6> merle:set("b", "1", "0", SomeTerm1).
["STORED"]
7> merle:get("b").                     
"howaboutthis"

*Deleting terms:*

11> merle:delete("b", "0").              
["DELETED"]
12> merle:get("b").                      
["END"]

*Getting stats:*

13> merle:stats(). 
["STAT pid 24117","STAT uptime 172","STAT time 1231789425",
 "STAT version 1.2.6","STAT pointer_size 64",
 "STAT rusage_user 0.000000","STAT rusage_system 0.004000",
 "STAT curr_items 1","STAT total_items 2","STAT bytes 80",
 "STAT curr_connections 2","STAT total_connections 4",
 "STAT connection_structures 3","STAT cmd_get 3",
 "STAT cmd_set 2","STAT get_hits 2","STAT get_misses 1",
 "STAT evictions 0","STAT bytes_read 101",
 "STAT bytes_written 101","STAT limit_maxbytes 67108864",
 "STAT threads 1","END"]


API:

start_link(Host, Port)

stats()

get(Key)

delete(Key, Time)

set(Key, Flag, ExpTime, Data)

add(Key, Flag, ExpTime, Data)

replace(Key, Flag, ExpTime, Data)

append(Key, Data)

prepend(Key, Data)

cas(Key, Flag, ExpTime, CasUniq, Data)

increment(Key, Data) - Proposed

decrement(Key, Data) - Proposed

quit()
